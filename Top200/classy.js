// Generated by CoffeeScript 1.9.3
var BoxPlot, BoxScatterMainPlot, BoxScatterPlot, CartesianChart, Chart, ForceDirectedGraph, RankingMovementPlot,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Chart = (function() {
  Chart.prototype.width = 600;

  Chart.prototype.height = 400;

  Chart.prototype.top_margin = 50;

  Chart.prototype.bottom_margin = 50;

  Chart.prototype.left_margin = 50;

  Chart.prototype.right_margin = 50;


  /*
  	Base class of all charts
  	Do not do anything except adding an svg child to the given DOM element
  	specifies three functions, to be overridden by subclasses
  	- layout(): draw the basic frame around the "data" e.g. axis, titles etc
  	- draw(): draw the data
  	- decorate(): make it fancy e.g. tooltips and legends
   */

  function Chart(element, data1, config) {
    var key, value;
    this.data = data1;
    for (key in config) {
      value = config[key];
      this[key] = value;
    }
    this.chart = d3.select(element).append("svg:svg").attr("width", this.width).attr("height", this.height);
  }

  Chart.prototype.visualise = function() {
    this.layout();
    this.draw();
    return this.decorate();
  };

  return Chart;

})();

ForceDirectedGraph = (function(superClass) {
  extend(ForceDirectedGraph, superClass);

  function ForceDirectedGraph(width, height, data, element) {
    ForceDirectedGraph.__super__.constructor.call(this, width, height, data, element);
    this.nodes = this.data.map(Object);
  }

  ForceDirectedGraph.prototype.layout = function() {
    return this.force = d3.layout.force().nodes(this.nodes).size([this.width, this.height]).start();
  };

  ForceDirectedGraph.prototype.draw = function() {
    var cmap, node;
    cmap = d3.scale.category10();
    node = this.chart.selectAll("circle.node").data(this.nodes).enter().append("svg:circle").attr("class", "node").attr("cx", function(d) {
      return d.x;
    }).attr("cy", function(d) {
      return d.y;
    }).attr("r", 8).style("fill", function(d, i) {
      return cmap(i & 3);
    }).style("stroke", function(d, i) {
      return d3.rgb(cmap(i & 3)).darker(1);
    }).style("stroke-width", 1.5).call(this.force.drag);
    return this.force.on("tick", function(e) {
      var i, j, k, len, n, ref;
      k = 6 * e.alpha;
      i = 0;
      ref = d3.selectAll("circle.node").data();
      for (j = 0, len = ref.length; j < len; j++) {
        n = ref[j];
        n.x += i & 2 ? k : -k;
        n.y += i & 1 ? k : -k;
        i += 1;
      }
      return node.attr("cx", function(d) {
        return d.x;
      }).attr("cy", function(d) {
        return d.y;
      });
    });
  };

  ForceDirectedGraph.prototype.decorate = function() {
    this.chart.style("opacity", 1e-6).transition().duration(1000).style("opacity", 1);
    return d3.select("body").on("click", (function(_this) {
      return function() {
        var j, len, n, ref;
        ref = d3.selectAll("circle.node").data();
        for (j = 0, len = ref.length; j < len; j++) {
          n = ref[j];
          n.x += (Math.random() - 0.5) * 40;
          n.y += (Math.random() - 0.5) * 40;
        }
        return _this.force.resume();
      };
    })(this));
  };

  return ForceDirectedGraph;

})(Chart);

CartesianChart = (function(superClass) {
  extend(CartesianChart, superClass);

  function CartesianChart() {
    return CartesianChart.__super__.constructor.apply(this, arguments);
  }


  /*
  	Helper class to handle basic tasks such as drawing axes and titles
   */

  CartesianChart.prototype.x_axis_label = "";

  CartesianChart.prototype.y_axis_label = "Score";

  CartesianChart.prototype.tooltip_offset_x = 10;

  CartesianChart.prototype.tooltip_offset_y = 10;

  CartesianChart.prototype.tooltip_opacity = 0.8;

  CartesianChart.prototype.y_min = 0;

  CartesianChart.prototype.y_max = 100;

  CartesianChart.prototype.transition_duration = 200;

  CartesianChart.prototype.create_title = function(parent, label) {
    var title_label;
    title_label = parent.append("text").attr("class", "chart_title");
    return title_label.attr("x", parent.width / 2).attr("y", -this.top_margin / 2).style("text-anchor", "middle").text(label);
  };

  CartesianChart.prototype.wrap_label = function(text_elm, line_height, width) {
    var dy, line, line_number, tspan, word, words, x, y;
    words = text_elm.text().split(/\s+/).reverse();
    line = [];
    line_number = 0;
    x = parseFloat(text_elm.attr("x"));
    y = parseFloat(text_elm.attr("y"));
    dy = parseFloat(text_elm.attr("dy"));
    tspan = text_elm.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");
    while ((word = words.pop())) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width && line.length > 1) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        line_number += 1;
        dy += line_number * line_height;
        tspan = text_elm.append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em").text(word);
      }
    }
    return void 0;
  };

  CartesianChart.prototype.create_ordinal_x_axis = function(parent, categories) {
    var range_width, wrap_label, x_axis, x_axis_block;
    this.x_scale = d3.scale.ordinal().domain(categories).rangeRoundBands([0, parent.width]);
    x_axis = d3.svg.axis().scale(this.x_scale).orient("bottom");
    x_axis_block = parent.append("g").attr("class", "x_axis").attr("transform", "translate(0, " + (this.height - this.bottom_margin * 2) + ")").call(x_axis);
    x_axis_block.append("text").attr("x", x_axis_block[0][0].getBBox().width / 2).attr("y", x_axis_block[0][0].getBBox().height + 15).style("text-anchor", "middle").text(this.x_axis_label).attr("class", "axis_label");
    this.range_width = this.x_scale.rangeBand();
    this.range_center = this.range_width / 2;
    if (this.x_axis_label_wrap) {
      range_width = this.range_width;
      wrap_label = this.wrap_label;
      return d3.select("g.x_axis").selectAll(".tick text").each(function() {
        var label_width, line_height, text_node, text_sel;
        text_node = this;
        text_sel = d3.select(text_node);
        line_height = 1.25;
        label_width = range_width * 0.8;
        return wrap_label(text_sel, line_height, label_width);
      });
    }
  };

  CartesianChart.prototype.create_linear_y_axis = function(parent) {
    var y_axis, y_axis_block;
    this.y_scale = d3.scale.linear().domain([this.y_min, this.y_max]).range([parent.height, 0]);
    y_axis = d3.svg.axis().scale(this.y_scale).orient("left");
    y_axis_block = parent.append("g").attr("class", "y_axis").call(y_axis);
    return y_axis_block.append("text").attr("transform", "rotate(-90)").attr("x", -y_axis_block[0][0].getBBox().height / 2).attr("y", -y_axis_block[0][0].getBBox().width).style("text-anchor", "middle").text(this.y_axis_label).attr("class", "axis_label");
  };

  CartesianChart.prototype.create_tooltip = function(element_name, html_template_func) {
    var format_tooltip;
    if (!this.tooltip) {
      this.tooltip = d3.select("body").append("div").attr("class", "boxplot_tooltip").style("position", "absolute").style("opacity", 0).text("I'm a tooltip!");
    }
    format_tooltip = (function(_this) {
      return function(d) {
        var html;
        html = html_template_func(d);
        return _this.tooltip.html(html).style("top", (d3.event.pageY + _this.tooltip_offset_y) + "px").style("left", (d3.event.pageX + _this.tooltip_offset_x) + "px");
      };
    })(this);
    return d3.selectAll(element_name).on("mouseover", (function(_this) {
      return function() {
        return _this.tooltip.style("opacity", 0).transition().duration(_this.transition_duration).style("opacity", _this.tooltip_opacity);
      };
    })(this)).on("mousemove", function(d) {
      return format_tooltip(d);
    }).on("mouseout", (function(_this) {
      return function() {
        return _this.tooltip.style("opacity", _this.tooltip_opacity).transition().duration(_this.transition_duration).style("opacity", 0);
      };
    })(this));
  };

  return CartesianChart;

})(Chart);


/*
Inspired by http://bl.ocks.org/jensgrubert/7789216
 */

BoxPlot = (function(superClass) {
  extend(BoxPlot, superClass);

  BoxPlot.prototype.color_scheme = "Set2";

  BoxPlot.prototype.title = "Box Plot";

  BoxPlot.prototype.x_axis_label_wrap = true;

  function BoxPlot(element, data, config) {
    this.draw_rect = bind(this.draw_rect, this);
    this.draw_middle = bind(this.draw_middle, this);
    this.draw_whiskers = bind(this.draw_whiskers, this);
    this.draw_center_line = bind(this.draw_center_line, this);
    this.draw_boxes = bind(this.draw_boxes, this);
    BoxPlot.__super__.constructor.call(this, element, data, config);
  }

  BoxPlot.prototype.layout = function() {
    this.main_block = this.chart.attr("class", "boxplot").append("g").attr("transform", "translate(" + this.left_margin + ", " + this.top_margin + ")");
    this.main_block.width = this.width - this.left_margin - this.right_margin;
    this.main_block.height = this.height - this.top_margin - this.bottom_margin;
    this.create_title(this.main_block, this.title);
    this.create_ordinal_x_axis(this.main_block, Object.keys(this.data));
    this.create_linear_y_axis(this.main_block);
    return this.box_width = this.range_width * 0.3;
  };

  BoxPlot.prototype.draw = function() {

    /*
    		bind data and create a g for each series,
    		create the frame for the boxes
    		then call draw_boxes to actually draw the boxes
     */
    var data_list, draw_boxes, i, k, n_items, top_margin, v, x_scale;
    x_scale = this.x_scale;
    top_margin = this.top_margin;
    draw_boxes = this.draw_boxes;
    data_list = (function() {
      var ref, results;
      ref = this.data;
      results = [];
      for (k in ref) {
        v = ref[k];
        results.push([k, v]);
      }
      return results;
    }).call(this);
    n_items = data_list.length;
    if (n_items < 3) {
      this.cmap = colorbrewer[this.color_scheme][3];
    } else if (n_items <= 8) {
      this.cmap = colorbrewer[this.color_scheme][n_items];
    } else {
      this.cmap = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = n_items - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(colorbrewer[this.color_scheme][8][i % 8]);
        }
        return results;
      }).call(this);
    }
    return this.main_block.selectAll(".box").data(data_list).enter().append("g").attr("class", "box").attr("transform", function(d) {
      return "translate(" + (x_scale(d[0])) + ",0)";
    }).call(draw_boxes);
  };

  BoxPlot.prototype.draw_boxes = function(gs) {
    var draw_center_line, draw_middle, draw_rect, draw_whiskers;
    draw_center_line = this.draw_center_line;
    draw_rect = this.draw_rect;
    draw_whiskers = this.draw_whiskers;
    draw_middle = this.draw_middle;
    return gs.each(function(data, i) {
      var g;
      g = this;
      draw_rect(g, data, i);
      draw_center_line(g, data, i);
      draw_middle(g, data, i);
      return draw_whiskers(g, data, i);
    });
  };

  BoxPlot.prototype.draw_center_line = function(g, data, i) {
    var center_line_data, range_center, x_scale, y_scale;
    x_scale = this.x_scale;
    y_scale = this.y_scale;
    range_center = this.range_center;
    center_line_data = [
      {
        lower: data[1].lower_whisker,
        upper: data[1].upper_whisker
      }
    ];
    d3.select(g).selectAll("line.center").data(center_line_data).enter().append("line").attr("class", "center").attr("x1", range_center).attr("x2", range_center).attr("y1", function(d) {
      return y_scale(d.lower);
    }).attr("y2", function(d) {
      return y_scale(d.upper);
    }).attr("stroke", this.cmap[i]);
    return void 0;
  };

  BoxPlot.prototype.draw_whiskers = function(g, data, i) {
    var box_width, range_center, whisker_block, whisker_data, x_scale, y_scale;
    x_scale = this.x_scale;
    y_scale = this.y_scale;
    box_width = this.box_width;
    range_center = this.range_center;
    whisker_data = [
      {
        lower: data[1].lower_whisker,
        upper: data[1].upper_whisker
      }
    ];
    whisker_block = d3.select(g).selectAll("line.whisker").data(whisker_data).enter();
    whisker_block.append("line").attr("class", "whisker").attr("x1", range_center - box_width / 2).attr("x2", range_center + box_width / 2).attr("y1", function(d) {
      return y_scale(d.upper);
    }).attr("y2", function(d) {
      return y_scale(d.upper);
    }).attr("stroke", this.cmap[i]);
    whisker_block.append("line").attr("class", "whisker").attr("x1", range_center - box_width / 2).attr("x2", range_center + box_width / 2).attr("y1", function(d) {
      return y_scale(d.lower);
    }).attr("y2", function(d) {
      return y_scale(d.lower);
    }).attr("stroke", this.cmap[i]);
    return void 0;
  };

  BoxPlot.prototype.draw_middle = function(g, data, i) {
    var box_width, middle_data, range_center, x_scale, y_scale;
    x_scale = this.x_scale;
    y_scale = this.y_scale;
    range_center = this.range_center;
    box_width = this.box_width;
    middle_data = [data[1].middle];
    d3.select(g).selectAll("line.middle").data(middle_data).enter().append("line").attr("class", "middle").attr("stroke", this.cmap[i]).attr("x1", range_center - box_width / 2).attr("x2", range_center + box_width / 2).attr("y1", y_scale).attr("y2", y_scale);
    return void 0;
  };

  BoxPlot.prototype.draw_rect = function(g, data, i) {
    var box_width, range_center, x_scale, y_scale;
    x_scale = this.x_scale;
    y_scale = this.y_scale;
    range_center = this.range_center;
    box_width = this.box_width;
    d3.select(g).selectAll("rect.box").data([data]).enter().append("rect").attr("class", "box").attr("x", range_center - box_width / 2).attr("y", function(d) {
      return y_scale(d[1].upper_box);
    }).attr("width", box_width).attr("height", function(d) {
      return y_scale(d[1].lower_box) - y_scale(d[1].upper_box);
    }).attr("fill", d3.rgb(this.cmap[i]).brighter());
    return void 0;
  };

  BoxPlot.prototype.decorate = function() {
    var format_tooltip;
    format_tooltip = (function(_this) {
      return function(d) {
        var html, lower_quartile, median, name, upper_quartile;
        name = d[0];
        upper_quartile = d[1].upper_box;
        median = d[1].middle;
        lower_quartile = d[1].lower_box;
        return html = "<div class=\"boxplot_tooltip_heading\">" + name + "</div>\n<div class=\"boxplot_tooltip_content\"> \n	<table>\n		<tr><td class=\"boxplot_tooltip_field\">25%</td>\n			<td class=\"boxplot_tooltip_value\">" + lower_quartile + "</td></tr>\n		<tr><td class=\"boxplot_tooltip_field\">50%</td>\n			<td class=\"boxplot_tooltip_value\">" + median + "</td></tr>\n		<tr><td class=\"boxplot_tooltip_field\">75%</td>\n			<td class=\"boxplot_tooltip_value\">" + upper_quartile + "</td></tr>\n	</table>\n</div>";
      };
    })(this);
    return this.create_tooltip("rect.box", format_tooltip);
  };

  return BoxPlot;

})(CartesianChart);

BoxScatterPlot = (function(superClass) {
  extend(BoxScatterPlot, superClass);

  BoxScatterPlot.prototype.title = "Box Scatter Plot";


  /*
  	This extends the boxplot with a strip plot
  	which is a kind of scatter plot with categorical x-axis
   */

  function BoxScatterPlot(element, data, config) {
    this.draw_points_in_box = bind(this.draw_points_in_box, this);
    BoxScatterPlot.__super__.constructor.call(this, element, data[0], config);
    this.peer_data = data[1];
  }

  BoxScatterPlot.prototype.draw = function() {
    var draw_points, gs, metric, peer_data, ref, score, scores, univ, univ_scores;
    BoxScatterPlot.__super__.draw.call(this);
    peer_data = {};
    ref = this.peer_data;
    for (univ in ref) {
      scores = ref[univ];
      for (metric in scores) {
        score = scores[metric];
        univ_scores = peer_data[metric] || [];
        univ_scores.push([univ, score]);
        peer_data[metric] = univ_scores;
      }
    }
    gs = this.chart.selectAll("g.box");
    draw_points = this.draw_points_in_box;
    return gs.each(function(d, i) {
      var g, name;
      g = this;
      name = d[0];
      return draw_points(g, i, peer_data[name]);
    });
  };

  BoxScatterPlot.prototype.draw_points_in_box = function(g, i, points_data) {
    var box, box_width, points_block, random_width, range_center, y_scale;
    if (points_data) {
      box = d3.select(g);
      points_block = box.selectAll("circle.peers").data(points_data).enter();
      range_center = this.range_center;
      box_width = this.box_width;
      random_width = d3.random.normal(0, 0.3);
      y_scale = this.y_scale;
      return points_block.append("circle").attr("class", "peers").attr("cx", function(d) {
        return range_center + box_width * random_width();
      }).attr("cy", function(d) {
        return y_scale(d[1]);
      }).attr("r", box_width / 5).attr("fill", this.cmap[i]);
    }
  };

  BoxScatterPlot.prototype.decorate = function() {
    var format_tooltip;
    BoxScatterPlot.__super__.decorate.call(this);
    if (this.peer_data) {
      format_tooltip = (function(_this) {
        return function(d) {
          var html, name, score;
          name = d[0];
          score = d[1];
          return html = "<p class=\"boxplot_tooltip_field\">" + name + "</p>\n<p class=\"boxplot_tooltip_value\">" + score + "</p>";
        };
      })(this);
      return this.create_tooltip("circle.peers", format_tooltip);
    }
  };

  return BoxScatterPlot;

})(BoxPlot);

BoxScatterMainPlot = (function(superClass) {
  extend(BoxScatterMainPlot, superClass);

  BoxScatterMainPlot.prototype.title = "Box Scatter Plot with Mains";

  function BoxScatterMainPlot(element, data, config) {
    BoxScatterMainPlot.__super__.constructor.call(this, element, data.slice(0, 2), config);
    this.main_data = data[2];
  }

  BoxScatterMainPlot.prototype.draw = function() {
    var box_width, gs, main_data, range_center, y_scale;
    BoxScatterMainPlot.__super__.draw.call(this);
    gs = this.chart.selectAll("g.box");
    main_data = this.main_data;
    range_center = this.range_center;
    box_width = this.box_width;
    y_scale = this.y_scale;
    return gs.each(function(d, i) {
      var circle, data, g, name, score;
      g = this;
      name = d[0];
      score = main_data[name];
      data = [[name, score]];
      return circle = d3.select(g).selectAll("circle.main").data(data).enter().append("circle").attr("class", "main").attr("cx", range_center).attr("cy", function(d) {
        return y_scale(d[1]);
      }).attr("r", box_width / 5);
    });
  };

  BoxScatterMainPlot.prototype.decorate = function() {
    var format_tooltip;
    BoxScatterMainPlot.__super__.decorate.call(this);
    format_tooltip = (function(_this) {
      return function(d) {
        var html, score;
        score = d[1];
        return html = "<p class=\"boxplot_tooltip_field\">Your score</p>\n<p class=\"boxplot_tooltip_value\">" + score + "</p>";
      };
    })(this);
    return this.create_tooltip("circle.main", format_tooltip);
  };

  return BoxScatterMainPlot;

})(BoxScatterPlot);

RankingMovementPlot = (function(superClass) {
  extend(RankingMovementPlot, superClass);

  RankingMovementPlot.prototype.title = "Ranking Movement";

  RankingMovementPlot.prototype.y_axis_label = "";

  function RankingMovementPlot(element, data, config) {
    RankingMovementPlot.__super__.constructor.call(this, element, data.rankings, config);
    this.ranking_labels = data.ranking_labels;
  }

  RankingMovementPlot.prototype.create_ordinal_x_axis = function(parent, categories) {
    var range_width, wrap_label, x_axis, x_axis_block;
    this.x_scale = d3.scale.ordinal().domain(categories).rangeRoundBands([0, parent.width]);
    x_axis = d3.svg.axis().scale(this.x_scale).orient("top");
    x_axis_block = parent.append("g").attr("class", "x_axis").call(x_axis);
    x_axis_block.append("text").attr("x", x_axis_block[0][0].getBBox().width / 2).attr("y", x_axis_block[0][0].getBBox().height - 5).style("text-anchor", "bottom").text(this.x_axis_label).attr("class", "axis_label");
    this.range_width = this.x_scale.rangeBand();
    this.range_center = this.range_width / 2;
    if (this.x_axis_label_wrap) {
      range_width = this.range_width;
      wrap_label = this.wrap_label;
      d3.select("g.x_axis").selectAll(".tick text").each(function() {
        var label_width, line_height, text_node, text_sel;
        text_node = this;
        text_sel = d3.select(text_node);
        line_height = 1.25;
        label_width = range_width * 0.8;
        return wrap_label(text_sel, line_height, label_width);
      });
    }
    return x_axis;
  };

  RankingMovementPlot.prototype.create_ordinal_y_axis = function(parent) {
    var j, last_ranking, max_rank, range_height, results, y_axis, y_axis_block, years;
    years = Object.keys(this.data);
    last_ranking = this.data[years[years.length - 1]];
    max_rank = Object.keys(last_ranking).length;
    this.y_scale = d3.scale.ordinal().domain((function() {
      results = [];
      for (var j = 1; 1 <= max_rank ? j <= max_rank : j >= max_rank; 1 <= max_rank ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this)).rangeRoundBands([0, parent.height]);
    y_axis = d3.svg.axis().scale(this.y_scale).orient("left");
    range_height = this.y_scale(2) - this.y_scale(1);
    y_axis_block = parent.append("g").attr("class", "y_axis").call(y_axis).selectAll("text").attr("alignment-baseline", "middle");
    y_axis_block.append("text").attr("transform", "rotate(-90)").attr("x", -y_axis_block[0][0].getBBox().height / 2).attr("y", -y_axis_block[0][0].getBBox().width).style("text-anchor", "middle").text(this.y_axis_label).attr("class", "axis_label");
    return y_axis;
  };

  RankingMovementPlot.prototype.layout = function() {
    var y_axis;
    this.main_block = this.chart.attr("class", "ranking_movement_plot").append("g").attr("transform", "translate(" + this.left_margin + ", " + this.top_margin + ")");
    this.main_block.width = this.width - this.left_margin - this.right_margin;
    this.main_block.height = this.height - this.top_margin - this.bottom_margin;
    this.create_title(this.main_block, this.title);
    this.create_ordinal_x_axis(this.main_block, Object.keys(this.data));
    y_axis = this.create_ordinal_y_axis(this.main_block);

    /*
    		years = Object.keys(@data).reverse()
    		n_ranks = @data[years[0]].length
    		y_axis.tickValues([1..n_ranks])
     */
    return this.box_width = this.range_width * 0.3;
  };

  RankingMovementPlot.prototype.draw = function() {
    var diagonal, draw_nodes, i, j, len, node_height, node_width, prev_year, range_height, range_width, rank, ranking, ranking_labels, ref, ref1, ref2, univ, wrap_label, x_scale, y_scale, year, years;
    x_scale = this.x_scale;
    y_scale = this.y_scale;
    range_width = this.range_width;
    node_width = range_width * 0.6;
    range_height = this.y_scale(2) - this.y_scale(1);
    node_height = range_height * 0.8;
    ranking_labels = this.ranking_labels;
    draw_nodes = function(gs) {
      return gs.each(function(data, i) {
        var g, text_block;
        g = d3.select(this);
        g.append("rect").attr("class", "node " + data.year + " " + data.univ).attr("id", data.univ).attr("x", (range_width - node_width) / 2).attr("y", (range_height - node_height) / 2).attr("width", node_width).attr("height", node_height);
        return text_block = g.append("text").text(ranking_labels[data.year][data.univ] + ". " + data.univ).attr("class", "node " + data.year + " " + data.univ).attr("x", range_width / 2).attr("y", range_height / 2).attr("text-anchor", "middle").attr("alignment-baseline", "middle");
      });
    };
    diagonal = d3.svg.diagonal().source(function(d) {
      return {
        "x": y_scale(d.y1) + range_height / 2,
        "y": x_scale(d.x1) + (range_width + node_width) / 2
      };
    }).target(function(d) {
      return {
        "x": y_scale(d.y2) + range_height / 2,
        "y": x_scale(d.x2) + (range_width - node_width) / 2
      };
    }).projection(function(d) {
      return [d.y, d.x];
    });
    this.node_data = [];
    ref = this.data;
    for (year in ref) {
      ranking = ref[year];
      for (univ in ranking) {
        rank = ranking[univ];
        this.node_data.push({
          year: year,
          rank: rank,
          univ: univ
        });
      }
    }
    this.main_block.selectAll("g.nodes").data(this.node_data).enter().append("g").attr("class", "nodes").attr("transform", function(d) {
      return "translate(" + (x_scale(d.year)) + "," + (y_scale(d.rank)) + ")";
    }).call(draw_nodes);
    wrap_label = this.wrap_label;
    this.main_block.selectAll(".nodes text").each(function() {
      var label_width, line_height, text_node;
      text_node = d3.select(this);
      line_height = 1.1;
      label_width = node_width * 0.95;
      return wrap_label(text_node, line_height, label_width);
    });
    this.link_data = [];
    years = Object.keys(this.data).reverse();
    ref1 = years.slice(0, +(years.length - 2) + 1 || 9e9);
    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
      year = ref1[i];
      prev_year = years[i + 1];
      ref2 = this.data[year];
      for (univ in ref2) {
        rank = ref2[univ];
        if (this.data[prev_year][univ]) {
          this.link_data.push({
            x1: prev_year,
            y1: this.data[prev_year][univ],
            x2: year,
            y2: rank
          });
        }
      }
    }
    return this.main_block.selectAll("path.links").data(this.link_data).enter().append("path").attr("class", "links").attr("d", diagonal);
  };

  RankingMovementPlot.prototype.wrap_label = function(text_elm, line_height, width) {
    var dy, line, line_number, tspan, word, words, x, y;
    words = text_elm.text().split(/\s+/).reverse();
    line = [];
    line_number = 0;
    x = parseFloat(text_elm.attr("x"));
    y = parseFloat(text_elm.attr("y"));
    dy = 0;
    tspan = text_elm.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");
    while ((word = words.pop())) {
      line.push(word);
      tspan.text(line.join(" "));
      if (tspan.node().getComputedTextLength() > width && line.length > 1) {
        line.pop();
        tspan.text(line.join(" "));
        line = [word];
        line_number += 1;
        dy += line_number * line_height;
        tspan = text_elm.append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em").text(word);
      }
    }
    return void 0;
  };

  RankingMovementPlot.prototype.decorate = function() {};

  return RankingMovementPlot;

})(CartesianChart);
